
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Oct 18 21:03:06 KST 2016
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Tue Oct 18 21:03:06 KST 2016
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\002" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\006\000\002\012" +
    "\010\000\002\012\007\000\002\013\006\000\002\013\004" +
    "\000\002\014\003\000\002\014\003\000\002\015\006\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\004\000\002\021\005\000\002\022\004\000\002" +
    "\023\006\000\002\023\005\000\002\024\005\000\002\024" +
    "\004\000\002\025\007\000\002\025\011\000\002\026\013" +
    "\000\002\026\012\000\002\026\012\000\002\026\011\000" +
    "\002\026\012\000\002\026\011\000\002\026\011\000\002" +
    "\026\010\000\002\027\011\000\002\027\007\000\002\030" +
    "\012\000\002\030\011\000\002\030\011\000\002\030\010" +
    "\000\002\031\011\000\002\031\010\000\002\031\007\000" +
    "\002\031\006\000\002\031\010\000\002\031\007\000\002" +
    "\031\006\000\002\031\005\000\002\032\007\000\002\032" +
    "\005\000\002\032\006\000\002\032\004\000\002\033\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\005\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\010\002\ufffc\033\013\034\011\001\002\000" +
    "\010\002\ufff8\033\ufff8\034\ufff8\001\002\000\004\002\277" +
    "\001\002\000\010\002\ufffd\033\013\034\011\001\002\000" +
    "\010\002\ufffe\033\013\034\011\001\002\000\004\051\016" +
    "\001\002\000\004\051\uffed\001\002\000\032\002\ufffa\011" +
    "\ufffa\012\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\043\ufffa\044\ufffa\051\ufffa\001\002\000\004\051" +
    "\uffee\001\002\000\006\004\270\006\271\001\002\000\006" +
    "\004\ufff5\006\ufff5\001\002\000\012\004\ufff4\006\ufff4\007" +
    "\020\013\017\001\002\000\012\026\070\047\064\050\071" +
    "\051\036\001\002\000\010\010\021\033\013\034\011\001" +
    "\002\000\004\011\027\001\002\000\006\004\025\010\026" +
    "\001\002\000\004\051\024\001\002\000\006\004\uffef\010" +
    "\uffef\001\002\000\006\033\013\034\011\001\002\000\004" +
    "\011\027\001\002\000\030\011\027\012\032\033\013\034" +
    "\011\035\043\037\034\040\055\041\045\043\035\044\040" +
    "\051\036\001\002\000\010\002\ufff2\033\ufff2\034\ufff2\001" +
    "\002\000\004\024\261\001\002\000\042\002\uffe9\011\uffe9" +
    "\012\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\051\uffe9\001\002\000\004\051\063\001\002\000\004\007" +
    "\255\001\002\000\014\006\252\026\070\047\064\050\071" +
    "\051\036\001\002\000\050\004\ufff4\006\ufff4\007\243\010" +
    "\ufff4\013\017\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\001\002\000\034\011\uffe2\012\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\051\uffe2\001\002\000\004" +
    "\007\201\001\002\000\030\011\027\012\176\033\013\034" +
    "\011\035\043\037\034\040\055\041\045\043\035\044\040" +
    "\051\036\001\002\000\034\011\uffe3\012\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\051\uffe3\001\002\000\004\007\167\001" +
    "\002\000\034\011\uffe0\012\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\051\uffe0\001\002\000\022\011\027\035\043\037\034" +
    "\040\055\041\045\043\035\044\040\051\036\001\002\000" +
    "\034\011\uffe5\012\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\051" +
    "\uffe5\001\002\000\034\011\uffe6\012\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\051\uffe6\001\002\000\004\006\160\001\002" +
    "\000\034\011\uffe1\012\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\051\uffe1\001\002\000\024\011\027\012\156\035\043\037" +
    "\034\040\055\041\045\043\035\044\040\051\036\001\002" +
    "\000\034\011\uffdf\012\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\051\uffdf\001\002\000\004\006\155\001\002\000\004\007" +
    "\060\001\002\000\032\011\uffe7\012\uffe7\035\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\051\uffe7\001\002\000\034\011\uffe4\012\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\051\uffe4\001\002\000\006\006\062" +
    "\051\063\001\002\000\004\006\137\001\002\000\014\006" +
    "\065\026\070\047\064\050\071\051\036\001\002\000\012" +
    "\004\ufff4\006\ufff4\013\017\024\ufff4\001\002\000\042\004" +
    "\uffad\006\uffad\010\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\001\002\000\006\010\133\051\063" +
    "\001\002\000\042\004\uffab\006\uffab\010\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\001\002\000" +
    "\042\004\uffae\006\uffae\010\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\001\002\000\012\026\070" +
    "\047\064\050\071\051\036\001\002\000\042\004\uffac\006" +
    "\uffac\010\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\001\002\000\034\006\104\015\103\016\076" +
    "\017\106\020\102\021\100\022\077\025\101\026\074\027" +
    "\075\030\105\031\073\032\107\001\002\000\012\026\070" +
    "\047\064\050\071\051\036\001\002\000\012\026\070\047" +
    "\064\050\071\051\036\001\002\000\012\026\070\047\064" +
    "\050\071\051\036\001\002\000\012\026\070\047\064\050" +
    "\071\051\036\001\002\000\012\026\070\047\064\050\071" +
    "\051\036\001\002\000\012\026\070\047\064\050\071\051" +
    "\036\001\002\000\012\026\070\047\064\050\071\051\036" +
    "\001\002\000\012\026\070\047\064\050\071\051\036\001" +
    "\002\000\012\026\070\047\064\050\071\051\036\001\002" +
    "\000\006\010\113\051\063\001\002\000\012\026\070\047" +
    "\064\050\071\051\036\001\002\000\012\026\070\047\064" +
    "\050\071\051\036\001\002\000\012\026\070\047\064\050" +
    "\071\051\036\001\002\000\042\004\uffb5\006\uffb5\010\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\025\uffb5\026\uffb5\027\075\030\105\031\uffb5\032\uffb5" +
    "\001\002\000\042\004\uffb4\006\uffb4\010\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\025\101" +
    "\026\074\027\075\030\105\031\073\032\107\001\002\000" +
    "\042\004\uffba\006\uffba\010\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\001\002\000\022\011\027" +
    "\035\043\037\034\040\055\041\045\043\035\044\040\051" +
    "\036\001\002\000\004\010\115\001\002\000\022\011\027" +
    "\035\043\037\034\040\055\041\045\043\035\044\040\051" +
    "\036\001\002\000\034\011\uffd1\012\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\051\uffd1\001\002\000\034\011\uffd0\012\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\051\uffd0\001\002\000\042" +
    "\004\uffb3\006\uffb3\010\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\025\101\026\074\027\075" +
    "\030\105\031\073\032\107\001\002\000\042\004\uffb2\006" +
    "\uffb2\010\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\025\101\026\074\027\075\030\105\031" +
    "\073\032\107\001\002\000\042\004\uffb8\006\uffb8\010\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\025\uffb8\026\uffb8\027\075\030\105\031\073\032\107" +
    "\001\002\000\042\004\uffb0\006\uffb0\010\uffb0\014\uffb0\015" +
    "\103\016\076\017\106\020\102\021\uffb0\022\uffb0\025\101" +
    "\026\074\027\075\030\105\031\073\032\107\001\002\000" +
    "\042\004\uffaf\006\uffaf\010\uffaf\014\uffaf\015\103\016\076" +
    "\017\106\020\102\021\uffaf\022\uffaf\025\101\026\074\027" +
    "\075\030\105\031\073\032\107\001\002\000\042\004\uffb1" +
    "\006\uffb1\010\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\025\101\026\074\027\075\030\105" +
    "\031\073\032\107\001\002\000\042\004\uffb9\006\uffb9\010" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\001\002\000\042\004\uffb7\006\uffb7\010\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\025" +
    "\uffb7\026\uffb7\027\075\030\105\031\073\032\107\001\002" +
    "\000\042\004\uffb6\006\uffb6\010\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6" +
    "\027\075\030\105\031\uffb6\032\uffb6\001\002\000\042\004" +
    "\uffbb\006\uffbb\010\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\025\uffbb\026\uffbb\027\075\030" +
    "\105\031\073\032\107\001\002\000\004\010\135\001\002" +
    "\000\022\011\027\035\043\037\034\040\055\041\045\043" +
    "\035\044\040\051\036\001\002\000\034\011\uffce\012\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\051\uffce\001\002\000\022" +
    "\011\027\035\043\037\034\040\055\041\045\043\035\044" +
    "\040\051\036\001\002\000\034\011\uffcf\012\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\051\uffcf\001\002\000\014\006\140" +
    "\026\070\047\064\050\071\051\036\001\002\000\006\010" +
    "\151\051\063\001\002\000\034\006\142\015\103\016\076" +
    "\017\106\020\102\021\100\022\077\025\101\026\074\027" +
    "\075\030\105\031\073\032\107\001\002\000\006\010\144" +
    "\051\063\001\002\000\004\010\146\001\002\000\022\011" +
    "\027\035\043\037\034\040\055\041\045\043\035\044\040" +
    "\051\036\001\002\000\034\011\uffd4\012\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\051\uffd4\001\002\000\022\011\027\035" +
    "\043\037\034\040\055\041\045\043\035\044\040\051\036" +
    "\001\002\000\034\011\uffd5\012\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\051\uffd5\001\002\000\004\010\153\001\002\000" +
    "\022\011\027\035\043\037\034\040\055\041\045\043\035" +
    "\044\040\051\036\001\002\000\034\011\uffd2\012\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\051\uffd2\001\002\000\022\011" +
    "\027\035\043\037\034\040\055\041\045\043\035\044\040" +
    "\051\036\001\002\000\034\011\uffd3\012\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\051\uffd3\001\002\000\034\011\uffdc\012" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\051\uffdc\001\002\000" +
    "\042\002\uffea\011\uffea\012\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\051\uffea\001\002\000\032\011\uffe8" +
    "\012\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\051\uffe8\001\002\000\034" +
    "\011\uffde\012\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\051\uffde" +
    "\001\002\000\004\037\162\001\002\000\004\007\163\001" +
    "\002\000\012\026\070\047\064\050\071\051\036\001\002" +
    "\000\034\010\165\015\103\016\076\017\106\020\102\021" +
    "\100\022\077\025\101\026\074\027\075\030\105\031\073" +
    "\032\107\001\002\000\004\006\166\001\002\000\034\011" +
    "\uffd6\012\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\051\uffd6\001" +
    "\002\000\012\026\070\047\064\050\071\051\036\001\002" +
    "\000\034\010\171\015\103\016\076\017\106\020\102\021" +
    "\100\022\077\025\101\026\074\027\075\030\105\031\073" +
    "\032\107\001\002\000\022\011\027\035\043\037\034\040" +
    "\055\041\045\043\035\044\040\051\036\001\002\000\034" +
    "\011\uffcc\012\uffcc\035\uffcc\036\173\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\051\uffcc" +
    "\001\002\000\022\011\027\035\043\037\034\040\055\041" +
    "\045\043\035\044\040\051\036\001\002\000\034\011\uffcd" +
    "\012\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\051\uffcd\001\002" +
    "\000\032\002\ufffb\011\ufffb\012\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\051\ufffb" +
    "\001\002\000\042\002\uffeb\011\uffeb\012\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\051\uffeb\001\002\000" +
    "\024\011\027\012\200\035\043\037\034\040\055\041\045" +
    "\043\035\044\040\051\036\001\002\000\042\002\uffec\011" +
    "\uffec\012\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\051\uffec\001\002\000\012\026\070\047\064\050\071" +
    "\051\036\001\002\000\034\010\203\015\103\016\076\017" +
    "\106\020\102\021\100\022\077\025\101\026\074\027\075" +
    "\030\105\031\073\032\107\001\002\000\004\011\204\001" +
    "\002\000\010\012\210\045\211\046\205\001\002\000\004" +
    "\005\235\001\002\000\010\012\223\045\224\046\205\001" +
    "\002\000\004\012\221\001\002\000\034\011\uffc8\012\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\051\uffc8\001\002\000\004" +
    "\047\212\001\002\000\004\005\213\001\002\000\032\011" +
    "\027\012\uffc0\035\043\037\034\040\055\041\045\042\214" +
    "\043\035\044\040\045\uffc0\046\uffc0\051\036\001\002\000" +
    "\004\006\220\001\002\000\032\011\027\012\uffc1\035\043" +
    "\037\034\040\055\041\045\042\216\043\035\044\040\045" +
    "\uffc1\046\uffc1\051\036\001\002\000\004\006\217\001\002" +
    "\000\010\012\uffc3\045\uffc3\046\uffc3\001\002\000\010\012" +
    "\uffc2\045\uffc2\046\uffc2\001\002\000\034\011\uffc9\012\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\051\uffc9\001\002\000\004" +
    "\012\234\001\002\000\034\011\uffca\012\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\051\uffca\001\002\000\004\047\225\001" +
    "\002\000\004\005\226\001\002\000\032\011\027\012\uffc4" +
    "\035\043\037\034\040\055\041\045\042\227\043\035\044" +
    "\040\045\uffc4\046\uffc4\051\036\001\002\000\004\006\233" +
    "\001\002\000\032\011\027\012\uffc5\035\043\037\034\040" +
    "\055\041\045\042\231\043\035\044\040\045\uffc5\046\uffc5" +
    "\051\036\001\002\000\004\006\232\001\002\000\010\012" +
    "\uffc7\045\uffc7\046\uffc7\001\002\000\010\012\uffc6\045\uffc6" +
    "\046\uffc6\001\002\000\034\011\uffcb\012\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\051\uffcb\001\002\000\026\011\027\012" +
    "\uffbc\035\043\037\034\040\055\041\045\042\236\043\035" +
    "\044\040\051\036\001\002\000\004\006\242\001\002\000" +
    "\026\011\027\012\uffbe\035\043\037\034\040\055\041\045" +
    "\042\240\043\035\044\040\051\036\001\002\000\004\006" +
    "\241\001\002\000\004\012\uffbf\001\002\000\004\012\uffbd" +
    "\001\002\000\014\010\245\026\070\047\064\050\071\051" +
    "\036\001\002\000\006\004\247\010\250\001\002\000\042" +
    "\004\uffda\006\uffda\010\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\001\002\000\036\004\uffa9\010" +
    "\uffa9\015\103\016\076\017\106\020\102\021\100\022\077" +
    "\025\101\026\074\027\075\030\105\031\073\032\107\001" +
    "\002\000\012\026\070\047\064\050\071\051\036\001\002" +
    "\000\042\004\uffdb\006\uffdb\010\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\001\002\000\036\004" +
    "\uffaa\010\uffaa\015\103\016\076\017\106\020\102\021\100" +
    "\022\077\025\101\026\074\027\075\030\105\031\073\032" +
    "\107\001\002\000\034\011\uffd8\012\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\051\uffd8\001\002\000\034\006\254\015\103" +
    "\016\076\017\106\020\102\021\100\022\077\025\101\026" +
    "\074\027\075\030\105\031\073\032\107\001\002\000\034" +
    "\011\uffd9\012\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\051\uffd9" +
    "\001\002\000\012\026\070\047\064\050\071\051\036\001" +
    "\002\000\034\010\257\015\103\016\076\017\106\020\102" +
    "\021\100\022\077\025\101\026\074\027\075\030\105\031" +
    "\073\032\107\001\002\000\022\011\027\035\043\037\034" +
    "\040\055\041\045\043\035\044\040\051\036\001\002\000" +
    "\034\011\uffd7\012\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\051" +
    "\uffd7\001\002\000\012\026\070\047\064\050\071\051\036" +
    "\001\002\000\036\006\uffdd\010\uffdd\015\103\016\076\017" +
    "\106\020\102\021\100\022\077\025\101\026\074\027\075" +
    "\030\105\031\073\032\107\001\002\000\004\051\264\001" +
    "\002\000\006\004\ufff0\010\ufff0\001\002\000\010\002\ufff1" +
    "\033\ufff1\034\ufff1\001\002\000\034\014\267\015\103\016" +
    "\076\017\106\020\102\021\100\022\077\025\101\026\074" +
    "\027\075\030\105\031\073\032\107\001\002\000\044\004" +
    "\ufff3\006\ufff3\010\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\001\002\000\004\051\063" +
    "\001\002\000\032\002\ufff7\011\ufff7\012\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7" +
    "\051\ufff7\001\002\000\006\004\ufff6\006\ufff6\001\002\000" +
    "\010\002\ufff9\033\ufff9\034\ufff9\001\002\000\004\051\275" +
    "\001\002\000\004\007\020\001\002\000\010\002\uffff\033" +
    "\013\034\011\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\016\004\004\005\005\006\006\007\011\012" +
    "\003\014\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\275\007\174\012\003\014\007\001\001\000" +
    "\006\012\272\014\273\001\001\000\006\010\013\011\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\065\023\066\033\265\001\001\000\006\013" +
    "\021\014\022\001\001\000\004\015\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\262\001\001\000\004\015\027\001\001\000\042\005\040" +
    "\007\011\011\030\014\032\015\052\016\051\017\055\020" +
    "\046\021\047\022\045\023\053\024\056\025\041\026\036" +
    "\027\050\030\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\013\011\014\001\001" +
    "\000\002\001\001\000\010\011\065\023\066\033\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\174\011\030\014\032\015\052\016\176\017" +
    "\055\020\046\021\047\022\045\023\053\024\056\025\041" +
    "\026\036\027\050\030\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\011\030\015\052" +
    "\017\160\020\046\021\047\022\045\023\053\024\056\025" +
    "\041\026\036\027\050\030\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\030\015\052\017\156\020\046\021\047\022\045" +
    "\023\053\024\056\025\041\026\036\027\050\030\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\030\021" +
    "\060\001\001\000\002\001\001\000\010\011\065\023\066" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\030\021\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\065\023\066\033\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\065\023\066" +
    "\033\127\001\001\000\010\011\065\023\066\033\126\001" +
    "\001\000\010\011\065\023\066\033\125\001\001\000\010" +
    "\011\065\023\066\033\124\001\001\000\010\011\065\023" +
    "\066\033\123\001\001\000\010\011\065\023\066\033\122" +
    "\001\001\000\010\011\065\023\066\033\121\001\001\000" +
    "\010\011\065\023\066\033\120\001\001\000\010\011\065" +
    "\023\066\033\117\001\001\000\006\011\030\021\113\001" +
    "\001\000\010\011\065\023\066\033\111\001\001\000\010" +
    "\011\065\023\066\033\110\001\001\000\010\011\065\023" +
    "\066\033\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\030\015\052\017\116\020" +
    "\046\021\047\022\045\023\053\024\056\025\041\026\036" +
    "\027\050\030\043\001\001\000\002\001\001\000\032\011" +
    "\030\015\052\017\115\020\046\021\047\022\045\023\053" +
    "\024\056\025\041\026\036\027\050\030\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\030\015\052\017\133\020\046\021\047\022\045" +
    "\023\053\024\056\025\041\026\036\027\050\030\043\001" +
    "\001\000\002\001\001\000\032\011\030\015\052\017\135" +
    "\020\046\021\047\022\045\023\053\024\056\025\041\026" +
    "\036\027\050\030\043\001\001\000\002\001\001\000\010" +
    "\011\065\023\066\033\140\001\001\000\006\011\030\021" +
    "\147\001\001\000\002\001\001\000\006\011\030\021\142" +
    "\001\001\000\002\001\001\000\032\011\030\015\052\017" +
    "\144\020\046\021\047\022\045\023\053\024\056\025\041" +
    "\026\036\027\050\030\043\001\001\000\002\001\001\000" +
    "\032\011\030\015\052\017\146\020\046\021\047\022\045" +
    "\023\053\024\056\025\041\026\036\027\050\030\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\030" +
    "\015\052\017\151\020\046\021\047\022\045\023\053\024" +
    "\056\025\041\026\036\027\050\030\043\001\001\000\002" +
    "\001\001\000\032\011\030\015\052\017\153\020\046\021" +
    "\047\022\045\023\053\024\056\025\041\026\036\027\050" +
    "\030\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\065\023\066\033" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\065\023\066\033\167\001\001\000" +
    "\002\001\001\000\032\011\030\015\052\017\171\020\046" +
    "\021\047\022\045\023\053\024\056\025\041\026\036\027" +
    "\050\030\043\001\001\000\002\001\001\000\032\011\030" +
    "\015\052\017\173\020\046\021\047\022\045\023\053\024" +
    "\056\025\041\026\036\027\050\030\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\011" +
    "\030\015\052\017\156\020\046\021\047\022\045\023\053" +
    "\024\056\025\041\026\036\027\050\030\043\001\001\000" +
    "\002\001\001\000\010\011\065\023\066\033\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\205\032" +
    "\206\001\001\000\002\001\001\000\004\032\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\030\015\052\016\214\017\055" +
    "\020\046\021\047\022\045\023\053\024\056\025\041\026" +
    "\036\027\050\030\043\001\001\000\002\001\001\000\032" +
    "\011\030\015\052\017\156\020\046\021\047\022\045\023" +
    "\053\024\056\025\041\026\036\027\050\030\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\030\015\052\016" +
    "\227\017\055\020\046\021\047\022\045\023\053\024\056" +
    "\025\041\026\036\027\050\030\043\001\001\000\002\001" +
    "\001\000\032\011\030\015\052\017\156\020\046\021\047" +
    "\022\045\023\053\024\056\025\041\026\036\027\050\030" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\030\015\052\016" +
    "\236\017\055\020\046\021\047\022\045\023\053\024\056" +
    "\025\041\026\036\027\050\030\043\001\001\000\002\001" +
    "\001\000\032\011\030\015\052\017\156\020\046\021\047" +
    "\022\045\023\053\024\056\025\041\026\036\027\050\030" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\065\023\066\033\245\034\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\065\023\066\033\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\065\023\066\033\255\001" +
    "\001\000\002\001\001\000\032\011\030\015\052\017\257" +
    "\020\046\021\047\022\045\023\053\024\056\025\041\026" +
    "\036\027\050\030\043\001\001\000\002\001\001\000\010" +
    "\011\065\023\066\033\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\272\014\273\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(Token current) {
   report_error("Syntax error (" + current.sym + ")", (Token)current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, Token tok) {
    errorMsg.error(tok.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arglist ::= expr 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*arglist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arglist ::= arglist COMMA expr 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*arglist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= identifier 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= FLOATNUM 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= INTNUM 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= call 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr NEQ expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr EQ expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr GE expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr LE expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr GT expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr LT expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr OR expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr AND expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr MINUS expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr PLUS expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr DIVIDE expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr TIMES expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= MINUS expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // defaultstmt ::= DEFAULT COLON 
            {
              Absyn.DefaultStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*defaultstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // defaultstmt ::= DEFAULT COLON BREAK SEMICOLON 
            {
              Absyn.DefaultStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*defaultstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // defaultstmt ::= DEFAULT COLON stmtlist 
            {
              Absyn.DefaultStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*defaultstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // defaultstmt ::= DEFAULT COLON stmtlist BREAK SEMICOLON 
            {
              Absyn.DefaultStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*defaultstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // caselist ::= CASE INTNUM COLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // caselist ::= CASE INTNUM COLON stmtlist 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // caselist ::= CASE INTNUM COLON BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // caselist ::= CASE INTNUM COLON stmtlist BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // caselist ::= caselist CASE INTNUM COLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // caselist ::= caselist CASE INTNUM COLON stmtlist 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // caselist ::= caselist CASE INTNUM COLON BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // caselist ::= caselist CASE INTNUM COLON stmtlist BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE defaultstmt RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE caselist RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE caselist defaultstmt RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ifstmt ::= IF LPAREN expr RPAREN stmt 
            {
              Absyn.IfStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ifstmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Absyn.IfStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // forstmt ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // forstmt ::= FOR LPAREN SEMICOLON SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // forstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // forstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // forstmt ::= FOR LPAREN assign SEMICOLON SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // forstmt ::= FOR LPAREN assign SEMICOLON SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // forstmt ::= FOR LPAREN assign SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // forstmt ::= FOR LPAREN assign SEMICOLON expr SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // whilestmt ::= DO stmt WHILE LPAREN expr RPAREN SEMICOLON 
            {
              Absyn.WhileStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*whilestmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // whilestmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Absyn.WhileStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*whilestmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // retstmt ::= RETURN SEMICOLON 
            {
              Absyn.ReturnStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*retstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // retstmt ::= RETURN expr SEMICOLON 
            {
              Absyn.ReturnStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*retstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // call ::= IDENTIFIER LPAREN RPAREN 
            {
              Absyn.CallExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // call ::= IDENTIFIER LPAREN arglist RPAREN 
            {
              Absyn.CallExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // callstmt ::= call SEMICOLON 
            {
              Absyn.CallStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*callstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign ::= identifier ASSIGN expr 
            {
              Absyn.AssignExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*assign*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignstmt ::= assign SEMICOLON 
            {
              Absyn.AssignStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*assignstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= compoundstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= switchstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= ifstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= forstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= whilestmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= retstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= callstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= assignstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtlist ::= stmt 
            {
              Absyn.StmtList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtlist ::= stmtlist stmt 
            {
              Absyn.StmtList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compoundstmt ::= LBRACE RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compoundstmt ::= LBRACE stmtlist RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compoundstmt ::= LBRACE declist RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compoundstmt ::= LBRACE declist stmtlist RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= FLOAT 
            {
              Absyn.NameTy RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Absyn.NameTy RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramlist ::= type IDENTIFIER 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*paramlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramlist ::= paramlist COMMA type IDENTIFIER 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*paramlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= type IDENTIFIER LPAREN RPAREN compoundstmt 
            {
              Absyn.FunctionDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= type IDENTIFIER LPAREN paramlist RPAREN compoundstmt 
            {
              Absyn.FunctionDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifier ::= IDENTIFIER LBRACK expr RBRACK 
            {
              Absyn.Ident RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*identifier*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifier ::= IDENTIFIER 
            {
              Absyn.Ident RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*identifier*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identlist ::= identifier 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*identlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identlist ::= identlist COMMA identifier 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*identlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= type identlist SEMICOLON 
            {
              Absyn.VarDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funclist ::= function 
            {
              Absyn.FuncList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*funclist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funclist ::= funclist function 
            {
              Absyn.FuncList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*funclist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declist ::= declaration 
            {
              Absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*declist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declist ::= declist declaration 
            {
              Absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*declist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= 
            {
              Absyn.Program RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= declist 
            {
              Absyn.Program RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= funclist 
            {
              Absyn.Program RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declist funclist 
            {
              Absyn.Program RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programm ::= expr 
            {
              Absyn.Program RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*programm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Program start_val = (Absyn.Program)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

