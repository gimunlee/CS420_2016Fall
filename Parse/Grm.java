
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Oct 18 00:11:23 KST 2016
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Tue Oct 18 00:11:23 KST 2016
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\004\000\002\005\002" +
    "\000\002\006\005\000\002\006\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\006\000\002" +
    "\011\010\000\002\011\007\000\002\012\006\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\014\006" +
    "\000\002\014\005\000\002\014\004\000\002\015\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\004" +
    "\000\002\020\005\000\002\021\004\000\002\022\006\000" +
    "\002\022\005\000\002\023\005\000\002\023\004\000\002" +
    "\024\007\000\002\024\011\000\002\025\013\000\002\025" +
    "\012\000\002\025\012\000\002\025\011\000\002\025\012" +
    "\000\002\025\011\000\002\025\011\000\002\025\010\000" +
    "\002\026\011\000\002\026\007\000\002\027\012\000\002" +
    "\027\011\000\002\027\011\000\002\027\010\000\002\030" +
    "\011\000\002\030\007\000\002\030\010\000\002\030\006" +
    "\000\002\030\010\000\002\030\007\000\002\032\004\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\010\002\ufffe\033\ufffe\034\ufffe\001\002\000" +
    "\004\002\265\001\002\000\010\002\ufffc\033\010\034\007" +
    "\001\002\000\010\002\000\033\024\034\023\001\002\000" +
    "\004\050\013\001\002\000\004\050\013\001\002\000\010" +
    "\002\uffff\033\uffff\034\uffff\001\002\000\006\004\014\006" +
    "\015\001\002\000\006\004\ufff8\006\ufff8\001\002\000\004" +
    "\050\016\001\002\000\010\002\ufffb\033\ufffb\034\ufffb\001" +
    "\002\000\006\004\ufff9\006\ufff9\001\002\000\006\004\014" +
    "\006\020\001\002\000\010\002\ufffa\033\ufffa\034\ufffa\001" +
    "\002\000\010\002\ufffd\033\ufffd\034\ufffd\001\002\000\004" +
    "\050\025\001\002\000\004\050\ufff0\001\002\000\004\050" +
    "\ufff1\001\002\000\004\007\026\001\002\000\010\010\027" +
    "\033\024\034\023\001\002\000\004\011\035\001\002\000" +
    "\006\004\033\010\034\001\002\000\004\050\032\001\002" +
    "\000\006\004\ufff2\010\ufff2\001\002\000\006\033\024\034" +
    "\023\001\002\000\004\011\035\001\002\000\010\012\041" +
    "\033\ufffe\034\ufffe\001\002\000\010\002\ufff5\033\ufff5\034" +
    "\ufff5\001\002\000\026\006\043\011\035\012\261\035\053" +
    "\037\046\040\065\041\056\043\047\044\052\050\050\001" +
    "\002\000\006\033\010\034\007\001\002\000\042\002\uffed" +
    "\006\uffed\011\uffed\012\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\050\uffed\001\002\000\026\006\043\011\035\012" +
    "\044\035\053\037\046\040\065\041\056\043\047\044\052" +
    "\050\050\001\002\000\034\006\uffe3\011\uffe3\012\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\050\uffe3\001\002\000\042\002\uffef\006" +
    "\uffef\011\uffef\012\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\050\uffef\001\002\000\004\024\257\001\002\000\004" +
    "\007\253\001\002\000\014\006\250\026\103\046\077\047" +
    "\104\050\050\001\002\000\046\004\ufff7\006\ufff7\007\241" +
    "\010\ufff7\013\074\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\001\002\000\034\006\uffe7\011\uffe7\012" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\050\uffe7\001\002\000\004\007" +
    "\206\001\002\000\004\007\200\001\002\000\034\006\uffe8" +
    "\011\uffe8\012\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\001\002" +
    "\000\034\006\uffe5\011\uffe5\012\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\050\uffe5\001\002\000\024\006\043\011\035\035\053\037" +
    "\046\040\065\041\056\043\047\044\052\050\050\001\002" +
    "\000\034\006\uffea\011\uffea\012\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\050\uffea\001\002\000\034\006\uffeb\011\uffeb\012\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\050\uffeb\001\002\000\034\006\uffe6\011" +
    "\uffe6\012\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\001\002\000" +
    "\004\006\171\001\002\000\034\006\uffe4\011\uffe4\012\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\050\uffe4\001\002\000\004\006\170" +
    "\001\002\000\004\007\070\001\002\000\032\006\uffec\011" +
    "\uffec\012\uffec\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\050\uffec\001\002\000\034\006" +
    "\uffe9\011\uffe9\012\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\050\uffe9\001" +
    "\002\000\006\006\072\050\073\001\002\000\004\006\152" +
    "\001\002\000\014\006\100\026\103\046\077\047\104\050" +
    "\050\001\002\000\006\013\074\024\ufff7\001\002\000\004" +
    "\046\075\001\002\000\004\014\076\001\002\000\042\004" +
    "\ufff6\006\ufff6\010\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\001\002\000\040\004\uffb7\006\uffb7" +
    "\010\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\001\002\000\006\010\146\050\073\001\002\000\040\004" +
    "\uffb5\006\uffb5\010\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\001\002\000\040\004\uffb8\006\uffb8\010\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\001\002" +
    "\000\012\026\103\046\077\047\104\050\050\001\002\000" +
    "\040\004\uffb6\006\uffb6\010\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\001\002\000\034\006\117\015\116" +
    "\016\111\017\121\020\115\021\114\022\112\025\113\026" +
    "\106\027\110\030\120\031\107\032\122\001\002\000\012" +
    "\026\103\046\077\047\104\050\050\001\002\000\012\026" +
    "\103\046\077\047\104\050\050\001\002\000\012\026\103" +
    "\046\077\047\104\050\050\001\002\000\012\026\103\046" +
    "\077\047\104\050\050\001\002\000\012\026\103\046\077" +
    "\047\104\050\050\001\002\000\012\026\103\046\077\047" +
    "\104\050\050\001\002\000\012\026\103\046\077\047\104" +
    "\050\050\001\002\000\012\026\103\046\077\047\104\050" +
    "\050\001\002\000\012\026\103\046\077\047\104\050\050" +
    "\001\002\000\006\010\127\050\073\001\002\000\012\026" +
    "\103\046\077\047\104\050\050\001\002\000\012\026\103" +
    "\046\077\047\104\050\050\001\002\000\012\026\103\046" +
    "\077\047\104\050\050\001\002\000\040\004\uffbf\006\uffbf" +
    "\010\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\025\uffbf\026\uffbf\027\110\030\120\031\uffbf\032\uffbf" +
    "\001\002\000\040\004\uffbe\006\uffbe\010\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\025\113\026\106" +
    "\027\110\030\120\031\107\032\122\001\002\000\040\004" +
    "\uffc4\006\uffc4\010\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\001\002\000\004\010\131\001\002\000\024" +
    "\006\043\011\035\035\053\037\046\040\065\041\056\043" +
    "\047\044\052\050\050\001\002\000\034\006\uffd4\011\uffd4" +
    "\012\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\050\uffd4\001\002\000\024" +
    "\006\043\011\035\035\053\037\046\040\065\041\056\043" +
    "\047\044\052\050\050\001\002\000\034\006\uffd5\011\uffd5" +
    "\012\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\050\uffd5\001\002\000\040" +
    "\004\uffbd\006\uffbd\010\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\025\113\026\106\027\110\030\120" +
    "\031\107\032\122\001\002\000\040\004\uffbc\006\uffbc\010" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\025\113\026\106\027\110\030\120\031\107\032\122\001" +
    "\002\000\040\004\uffba\006\uffba\010\uffba\015\116\016\111" +
    "\017\121\020\115\021\uffba\022\uffba\025\113\026\106\027" +
    "\110\030\120\031\107\032\122\001\002\000\040\004\uffc2" +
    "\006\uffc2\010\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\025\uffc2\026\uffc2\027\110\030\120\031\107" +
    "\032\122\001\002\000\040\004\uffb9\006\uffb9\010\uffb9\015" +
    "\116\016\111\017\121\020\115\021\uffb9\022\uffb9\025\113" +
    "\026\106\027\110\030\120\031\107\032\122\001\002\000" +
    "\040\004\uffbb\006\uffbb\010\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\025\113\026\106\027\110\030" +
    "\120\031\107\032\122\001\002\000\040\004\uffc3\006\uffc3" +
    "\010\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\001\002\000\040\004\uffc0\006\uffc0\010\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\025\uffc0\026\uffc0" +
    "\027\110\030\120\031\uffc0\032\uffc0\001\002\000\040\004" +
    "\uffc1\006\uffc1\010\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\025\uffc1\026\uffc1\027\110\030\120\031" +
    "\107\032\122\001\002\000\040\004\uffc5\006\uffc5\010\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\025" +
    "\uffc5\026\uffc5\027\110\030\120\031\107\032\122\001\002" +
    "\000\004\010\150\001\002\000\024\006\043\011\035\035" +
    "\053\037\046\040\065\041\056\043\047\044\052\050\050" +
    "\001\002\000\034\006\uffd2\011\uffd2\012\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\050\uffd2\001\002\000\024\006\043\011\035\035" +
    "\053\037\046\040\065\041\056\043\047\044\052\050\050" +
    "\001\002\000\034\006\uffd3\011\uffd3\012\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\050\uffd3\001\002\000\014\006\153\026\103\046" +
    "\077\047\104\050\050\001\002\000\006\010\163\050\073" +
    "\001\002\000\034\006\155\015\116\016\111\017\121\020" +
    "\115\021\114\022\112\025\113\026\106\027\110\030\120" +
    "\031\107\032\122\001\002\000\006\010\157\050\073\001" +
    "\002\000\004\010\161\001\002\000\024\006\043\011\035" +
    "\035\053\037\046\040\065\041\056\043\047\044\052\050" +
    "\050\001\002\000\034\006\uffd8\011\uffd8\012\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\050\uffd8\001\002\000\024\006\043\011\035" +
    "\035\053\037\046\040\065\041\056\043\047\044\052\050" +
    "\050\001\002\000\034\006\uffd9\011\uffd9\012\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\050\uffd9\001\002\000\024\006\043\011\035" +
    "\035\053\037\046\040\065\041\056\043\047\044\052\050" +
    "\050\001\002\000\004\010\165\001\002\000\024\006\043" +
    "\011\035\035\053\037\046\040\065\041\056\043\047\044" +
    "\052\050\050\001\002\000\034\006\uffd7\011\uffd7\012\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\050\uffd7\001\002\000\034\006\uffd6" +
    "\011\uffd6\012\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\050\uffd6\001\002" +
    "\000\034\006\uffe0\011\uffe0\012\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\050\uffe0\001\002\000\034\006\uffe2\011\uffe2\012\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\050\uffe2\001\002\000\004\037\173\001" +
    "\002\000\004\007\174\001\002\000\012\026\103\046\077" +
    "\047\104\050\050\001\002\000\034\010\176\015\116\016" +
    "\111\017\121\020\115\021\114\022\112\025\113\026\106" +
    "\027\110\030\120\031\107\032\122\001\002\000\004\006" +
    "\177\001\002\000\034\006\uffda\011\uffda\012\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\050\uffda\001\002\000\012\026\103\046\077" +
    "\047\104\050\050\001\002\000\034\010\202\015\116\016" +
    "\111\017\121\020\115\021\114\022\112\025\113\026\106" +
    "\027\110\030\120\031\107\032\122\001\002\000\024\006" +
    "\043\011\035\035\053\037\046\040\065\041\056\043\047" +
    "\044\052\050\050\001\002\000\034\006\uffd0\011\uffd0\012" +
    "\uffd0\035\uffd0\036\204\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\050\uffd0\001\002\000\024\006" +
    "\043\011\035\035\053\037\046\040\065\041\056\043\047" +
    "\044\052\050\050\001\002\000\034\006\uffd1\011\uffd1\012" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\050\uffd1\001\002\000\012\026" +
    "\103\046\077\047\104\050\050\001\002\000\034\010\210" +
    "\015\116\016\111\017\121\020\115\021\114\022\112\025" +
    "\113\026\106\027\110\030\120\031\107\032\122\001\002" +
    "\000\004\011\211\001\002\000\006\012\214\045\215\001" +
    "\002\000\006\012\227\045\230\001\002\000\004\012\225" +
    "\001\002\000\034\006\uffcc\011\uffcc\012\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\050\uffcc\001\002\000\004\046\216\001\002\000" +
    "\004\005\217\001\002\000\004\042\221\001\002\000\032" +
    "\006\043\011\035\012\uffc8\035\053\037\046\040\065\041" +
    "\056\042\223\043\047\044\052\045\uffc8\050\050\001\002" +
    "\000\004\006\222\001\002\000\006\012\uffc6\045\uffc6\001" +
    "\002\000\004\006\224\001\002\000\006\012\uffc7\045\uffc7" +
    "\001\002\000\034\006\uffcd\011\uffcd\012\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\050\uffcd\001\002\000\004\012\240\001\002\000" +
    "\034\006\uffce\011\uffce\012\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\050" +
    "\uffce\001\002\000\004\046\231\001\002\000\004\005\232" +
    "\001\002\000\004\042\234\001\002\000\032\006\043\011" +
    "\035\012\uffca\035\053\037\046\040\065\041\056\042\236" +
    "\043\047\044\052\045\uffca\050\050\001\002\000\004\006" +
    "\235\001\002\000\006\012\uffc9\045\uffc9\001\002\000\004" +
    "\006\237\001\002\000\006\012\uffcb\045\uffcb\001\002\000" +
    "\034\006\uffcf\011\uffcf\012\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\050" +
    "\uffcf\001\002\000\014\010\243\026\103\046\077\047\104" +
    "\050\050\001\002\000\006\004\245\010\246\001\002\000" +
    "\040\004\uffde\006\uffde\010\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\001\002\000\036\004\uffb3\010\uffb3" +
    "\015\116\016\111\017\121\020\115\021\114\022\112\025" +
    "\113\026\106\027\110\030\120\031\107\032\122\001\002" +
    "\000\012\026\103\046\077\047\104\050\050\001\002\000" +
    "\040\004\uffdf\006\uffdf\010\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\001\002\000\036\004\uffb4\010\uffb4" +
    "\015\116\016\111\017\121\020\115\021\114\022\112\025" +
    "\113\026\106\027\110\030\120\031\107\032\122\001\002" +
    "\000\034\006\uffdc\011\uffdc\012\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\050\uffdc\001\002\000\034\006\252\015\116\016\111\017" +
    "\121\020\115\021\114\022\112\025\113\026\106\027\110" +
    "\030\120\031\107\032\122\001\002\000\034\006\uffdd\011" +
    "\uffdd\012\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\001\002\000" +
    "\012\026\103\046\077\047\104\050\050\001\002\000\034" +
    "\010\255\015\116\016\111\017\121\020\115\021\114\022" +
    "\112\025\113\026\106\027\110\030\120\031\107\032\122" +
    "\001\002\000\024\006\043\011\035\035\053\037\046\040" +
    "\065\041\056\043\047\044\052\050\050\001\002\000\034" +
    "\006\uffdb\011\uffdb\012\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\050\uffdb" +
    "\001\002\000\012\026\103\046\077\047\104\050\050\001" +
    "\002\000\036\006\uffe1\010\uffe1\015\116\016\111\017\121" +
    "\020\115\021\114\022\112\025\113\026\106\027\110\030" +
    "\120\031\107\032\122\001\002\000\042\002\uffee\006\uffee" +
    "\011\uffee\012\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\050\uffee\001\002\000\004\050\263\001\002\000\006\004" +
    "\ufff3\010\ufff3\001\002\000\010\002\ufff4\033\ufff4\034\ufff4" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\005\006\010\001\001\000\006\011\020" +
    "\013\021\001\001\000\004\007\016\001\001\000\004\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\027\013\030\001\001\000\004" +
    "\014\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\261\001\001\000\004\014\035" +
    "\001\001\000\006\004\037\015\036\001\001\000\002\001" +
    "\001\000\032\010\044\014\062\016\065\017\057\020\061" +
    "\021\056\022\063\023\066\024\053\025\050\026\060\027" +
    "\054\001\001\000\006\006\010\015\041\001\001\000\002" +
    "\001\001\000\032\010\044\014\062\016\065\017\057\020" +
    "\061\021\056\022\063\023\066\024\053\025\050\026\060" +
    "\027\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\100\022\101" +
    "\032\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\010\044\014\062\016\171\017\057\020" +
    "\061\021\056\022\063\023\066\024\053\025\050\026\060" +
    "\027\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\044\020\070\001\001\000\002\001\001" +
    "\000\010\010\100\022\101\032\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\044\020\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\100\022\101" +
    "\032\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\100\022\101\032\142\001\001\000\010\010\100" +
    "\022\101\032\141\001\001\000\010\010\100\022\101\032" +
    "\140\001\001\000\010\010\100\022\101\032\137\001\001" +
    "\000\010\010\100\022\101\032\136\001\001\000\010\010" +
    "\100\022\101\032\135\001\001\000\010\010\100\022\101" +
    "\032\134\001\001\000\010\010\100\022\101\032\133\001" +
    "\001\000\010\010\100\022\101\032\132\001\001\000\006" +
    "\010\044\020\125\001\001\000\010\010\100\022\101\032" +
    "\124\001\001\000\010\010\100\022\101\032\123\001\001" +
    "\000\010\010\100\022\101\032\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\044\014\062\016\127\017\057\020\061\021" +
    "\056\022\063\023\066\024\053\025\050\026\060\027\054" +
    "\001\001\000\002\001\001\000\032\010\044\014\062\016" +
    "\131\017\057\020\061\021\056\022\063\023\066\024\053" +
    "\025\050\026\060\027\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\044\014\062\016\146\017" +
    "\057\020\061\021\056\022\063\023\066\024\053\025\050" +
    "\026\060\027\054\001\001\000\002\001\001\000\032\010" +
    "\044\014\062\016\150\017\057\020\061\021\056\022\063" +
    "\023\066\024\053\025\050\026\060\027\054\001\001\000" +
    "\002\001\001\000\010\010\100\022\101\032\153\001\001" +
    "\000\006\010\044\020\163\001\001\000\002\001\001\000" +
    "\006\010\044\020\155\001\001\000\002\001\001\000\032" +
    "\010\044\014\062\016\157\017\057\020\061\021\056\022" +
    "\063\023\066\024\053\025\050\026\060\027\054\001\001" +
    "\000\002\001\001\000\032\010\044\014\062\016\161\017" +
    "\057\020\061\021\056\022\063\023\066\024\053\025\050" +
    "\026\060\027\054\001\001\000\002\001\001\000\032\010" +
    "\044\014\062\016\166\017\057\020\061\021\056\022\063" +
    "\023\066\024\053\025\050\026\060\027\054\001\001\000" +
    "\002\001\001\000\032\010\044\014\062\016\165\017\057" +
    "\020\061\021\056\022\063\023\066\024\053\025\050\026" +
    "\060\027\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\100\022\101\032\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\100\022\101\032\200\001\001\000\002\001\001" +
    "\000\032\010\044\014\062\016\202\017\057\020\061\021" +
    "\056\022\063\023\066\024\053\025\050\026\060\027\054" +
    "\001\001\000\002\001\001\000\032\010\044\014\062\016" +
    "\204\017\057\020\061\021\056\022\063\023\066\024\053" +
    "\025\050\026\060\027\054\001\001\000\002\001\001\000" +
    "\010\010\100\022\101\032\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\211\031\212\001\001\000" +
    "\004\031\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\217\001" +
    "\001\000\032\010\044\014\062\016\065\017\057\020\061" +
    "\021\056\022\063\023\066\024\053\025\050\026\060\027" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\232\001\001\000\032\010\044\014\062\016" +
    "\065\017\057\020\061\021\056\022\063\023\066\024\053" +
    "\025\050\026\060\027\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\100\022\101\032\243\033\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\100\022\101\032\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\100\022\101\032\253\001" +
    "\001\000\002\001\001\000\032\010\044\014\062\016\255" +
    "\017\057\020\061\021\056\022\063\023\066\024\053\025" +
    "\050\026\060\027\054\001\001\000\002\001\001\000\010" +
    "\010\100\022\101\032\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(Token current) {
   report_error("Syntax error (" + current.sym + ")", (Token)current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, Token tok) {
    errorMsg.error(tok.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arglist ::= expr 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*arglist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arglist ::= arglist COMMA expr 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*arglist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= identifier 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= FLOATNUM 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= INTNUM 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= call 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr NEQ expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr EQ expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr GE expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr LE expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr GT expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr LT expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr OR expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr AND expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr MINUS expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr PLUS expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr DIVIDE expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr TIMES expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= MINUS expr 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // caselist ::= CASE INTNUM COLON BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // caselist ::= CASE INTNUM COLON stmtlist BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caselist ::= CASE INTNUM COLON stmtlist 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // caselist ::= caselist CASE INTNUM COLON BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // caselist ::= caselist CASE INTNUM COLON stmtlist 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // caselist ::= caselist CASE INTNUM COLON stmtlist BREAK SEMICOLON 
            {
              Absyn.CaseList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*caselist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE defaultstmt RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE caselist RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE caselist defaultstmt RBRACE 
            {
              Absyn.SwitchStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*switchstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifstmt ::= IF LPAREN expr RPAREN stmt 
            {
              Absyn.IfStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifstmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Absyn.IfStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // forstmt ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // forstmt ::= FOR LPAREN SEMICOLON SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // forstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // forstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // forstmt ::= FOR LPAREN assign SEMICOLON SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // forstmt ::= FOR LPAREN assign SEMICOLON SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // forstmt ::= FOR LPAREN assign SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // forstmt ::= FOR LPAREN assign SEMICOLON expr SEMICOLON assign RPAREN stmt 
            {
              Absyn.ForStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*forstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // whilestmt ::= DO stmt WHILE LPAREN expr RPAREN SEMICOLON 
            {
              Absyn.WhileStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*whilestmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // whilestmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Absyn.WhileStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*whilestmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // retstmt ::= RETURN SEMICOLON 
            {
              Absyn.ReturnStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*retstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // retstmt ::= RETURN expr SEMICOLON 
            {
              Absyn.ReturnStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*retstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // call ::= IDENTIFIER LPAREN RPAREN 
            {
              Absyn.CallExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // call ::= IDENTIFIER LPAREN arglist RPAREN 
            {
              Absyn.CallExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // callstmt ::= call SEMICOLON 
            {
              Absyn.CallStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*callstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assign ::= identifier ASSIGN expr 
            {
              Absyn.AssignExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*assign*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignstmt ::= assign SEMICOLON 
            {
              Absyn.AssignStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*assignstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= SEMICOLON 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= compoundstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= switchstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ifstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= forstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= whilestmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= retstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= callstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= assignstmt 
            {
              Absyn.Stmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtlist ::= stmtlist stmt 
            {
              Absyn.StmtList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compoundstmt ::= LBRACE RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compoundstmt ::= LBRACE stmtlist RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compoundstmt ::= LBRACE declist stmtlist RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= FLOAT 
            {
              Absyn.NameTy RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INT 
            {
              Absyn.NameTy RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramlist ::= type IDENTIFIER 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*paramlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramlist ::= paramlist COMMA type IDENTIFIER 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*paramlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= type IDENTIFIER LPAREN RPAREN compoundstmt 
            {
              Absyn.FunctionDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= type IDENTIFIER LPAREN paramlist RPAREN compoundstmt 
            {
              Absyn.FunctionDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifier ::= IDENTIFIER LBRACK INTNUM RBRACK 
            {
              Absyn.Ident RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*identifier*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identifier ::= IDENTIFIER 
            {
              Absyn.Ident RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*identifier*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identlist ::= IDENTIFIER 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*identlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identlist ::= identlist COMMA IDENTIFIER 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*identlist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= FLOAT identlist SEMICOLON 
            {
              Absyn.VarDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= INT identlist SEMICOLON 
            {
              Absyn.VarDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funclist ::= 
            {
              Absyn.FuncList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*funclist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funclist ::= funclist function 
            {
              Absyn.FuncList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*funclist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declist ::= 
            {
              Absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declist ::= declist declaration 
            {
              Absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declist funclist 
            {
              Absyn.Program RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Program start_val = (Absyn.Program)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

