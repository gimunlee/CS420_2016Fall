package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(Token current) {
   report_error("Syntax error (" + current.sym + ")", (Token)current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, Token tok) {
    errorMsg.error(tok.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

:};

scan with {: return lexer.nextToken(); :};

terminal COMMA, COLON, SEMICOLON;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal GT, GE, LT, LE, EQ, NEQ;

terminal DOT;
terminal ASSIGN;
terminal PLUS, MINUS, DIVIDE, TIMES;
terminal AND, OR;

terminal INT, FLOAT;
terminal IF, ELSE;
terminal WHILE, FOR, DO;
terminal BREAK;
terminal RETURN;
terminal SWITCH, CASE, DEFAULT;

terminal Float INTNUM, FLOATNUM;
terminal String IDENTIFIER;


non terminal Absyn.Program programm;
non terminal Absyn.Program program;
non terminal Absyn.DecList declist;
non terminal Absyn.FuncList funclist;
non terminal Absyn.VarDec declaration;
non terminal Absyn.FieldList identlist;
non terminal Absyn.Ident identifier;
non terminal Absyn.FunctionDec function;
non terminal Absyn.FieldList paramlist;
non terminal Absyn.NameTy type;
non terminal Absyn.CompoundStmt compoundstmt;
non terminal Absyn.StmtList stmtlist;
non terminal Absyn.Stmt stmt;
non terminal Absyn.AssignStmt assignstmt;
non terminal Absyn.AssignExp assign;
non terminal Absyn.CallStmt callstmt;
non terminal Absyn.CallExp call;
non terminal Absyn.ReturnStmt retstmt;
non terminal Absyn.WhileStmt whilestmt;
non terminal Absyn.ForStmt forstmt;
non terminal Absyn.IfStmt ifstmt;
non terminal Absyn.SwitchStmt switchstmt;
non terminal Absyn.CaseList caselist;
non terminal Absyn.DefaultStmt defaultstmt;
non terminal Absyn.Exp expr;
non terminal Absyn.FieldList arglist;

precedence nonassoc ELSE;
precedence right ASSIGN;
precedence left EQ, NEQ;
precedence left LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left AND, OR;
precedence left TIMES, DIVIDE;

start with program;

programm ::= expr;

program ::= declist funclist
          | funclist
          | declist
          |;

declist ::= declist declaration
          | declaration;
funclist ::= funclist function
            | function;
declaration ::= type identlist SEMICOLON;
identlist ::= identlist COMMA identifier
            | identifier;
identifier ::= IDENTIFIER
            | IDENTIFIER LBRACK expr RBRACK;
function ::= type IDENTIFIER LPAREN paramlist RPAREN compoundstmt
            | type IDENTIFIER LPAREN RPAREN compoundstmt;
paramlist ::= paramlist COMMA type IDENTIFIER
            | type IDENTIFIER;
type ::= INT
      | FLOAT;
compoundstmt ::= LBRACE declist stmtlist RBRACE
              | LBRACE declist RBRACE
              | LBRACE stmtlist RBRACE
              | LBRACE RBRACE;
stmtlist ::= stmtlist stmt
          | stmt;
stmt ::= assignstmt
      | callstmt
      | retstmt
      | whilestmt
      | forstmt
      | ifstmt
      | switchstmt
      | compoundstmt;
assignstmt ::= assign SEMICOLON;
assign ::= identifier ASSIGN expr;
callstmt ::= call SEMICOLON;
call ::= IDENTIFIER LPAREN arglist RPAREN
      | IDENTIFIER LPAREN RPAREN;
retstmt ::= RETURN expr SEMICOLON
          | RETURN SEMICOLON;
whilestmt ::= WHILE LPAREN expr RPAREN stmt
            | DO stmt WHILE LPAREN expr RPAREN SEMICOLON;
forstmt ::= FOR LPAREN assign SEMICOLON expr SEMICOLON assign RPAREN stmt
          | FOR LPAREN assign SEMICOLON expr SEMICOLON RPAREN stmt
          | FOR LPAREN assign SEMICOLON SEMICOLON assign RPAREN stmt
          | FOR LPAREN assign SEMICOLON SEMICOLON RPAREN stmt
          | FOR LPAREN SEMICOLON expr SEMICOLON assign RPAREN stmt
          | FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
          | FOR LPAREN SEMICOLON SEMICOLON assign RPAREN stmt
          | FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt;
ifstmt ::= IF LPAREN expr RPAREN stmt ELSE stmt
          | IF LPAREN expr RPAREN stmt;
switchstmt ::= SWITCH LPAREN expr RPAREN LBRACE caselist defaultstmt RBRACE
            | SWITCH LPAREN expr RPAREN LBRACE caselist RBRACE
            | SWITCH LPAREN expr RPAREN LBRACE defaultstmt RBRACE
            | SWITCH LPAREN expr RPAREN LBRACE RBRACE;
caselist ::= caselist CASE INTNUM COLON stmtlist BREAK SEMICOLON
            | caselist CASE INTNUM COLON BREAK SEMICOLON
            | caselist CASE INTNUM COLON stmtlist
            | caselist CASE INTNUM COLON
            | CASE INTNUM COLON stmtlist BREAK SEMICOLON
            | CASE INTNUM COLON BREAK SEMICOLON
            | CASE INTNUM COLON stmtlist
            | CASE INTNUM COLON;
defaultstmt ::= DEFAULT COLON stmtlist BREAK SEMICOLON
            | DEFAULT COLON stmtlist
            | DEFAULT COLON BREAK SEMICOLON
            | DEFAULT COLON;
expr ::= MINUS expr
      | expr TIMES expr
      | expr DIVIDE expr
      | expr PLUS expr
      | expr MINUS expr
      | expr AND expr
      | expr OR expr
      | expr LT expr
      | expr GT expr
      | expr LE expr
      | expr GE expr
      | expr EQ expr
      | expr NEQ expr
      | call
      | INTNUM
      | FLOATNUM
      | identifier;
arglist ::= arglist COMMA expr
          | expr;