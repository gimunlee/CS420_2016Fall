package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(Token current) {
   report_error("Syntax error (" + current.sym + ")", (Token)current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, Token tok) {
    errorMsg.error(tok.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

:};

scan with {: return lexer.nextToken(); :};

terminal COMMA, COLON, SEMICOLON;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal GT, GE, LT, LE, EQ, NEQ;

terminal DOT;
terminal ASSIGN;
terminal PLUS, MINUS, DIVIDE, TIMES;
terminal AND, OR;

terminal INT, FLOAT;
terminal IF, ELSE, ELSEIF;
terminal WHILE, FOR, DO;
terminal BREAK;

terminal Float INTNUM, FLOATNUM;
terminal String IDENTIFIER;


non terminal Absyn.Program program;
non terminal Absyn.DecList declist;
non terminal Absyn.FuncList funclist;
non terminal Absyn.De
non terminal Absyn.VarDec declaration;
non terminal Absyn.FieldList identlist;
non terminal Absyn.FunctionDec function;
non terminal Absyn.FieldList paramlist;
non terminal Absyn.NameTy type;
non terminal Absyn.CompoundStmt compoundstmt;
non terminal Absyn.StmtList stmtlist;
non terminal Absyn.Stmt stmt;
non terminal Absyn.AssignStmt assignstmt;
non terminal Absyn.AssignExp assign;
non terminal Absyn.CallStmt callstmt;
non terminal Absyn.CallExp call;
non terminal Absyn.ReturnStmt retstmt;
non terminal Absyn.WhileStmt whilestmt;
non terminal Absyn.ForStmt forstmt;
non terminal Absyn.IfStmt ifstmt;
non terminal Absyn.Exp expr;
non terminal Absyn.FieldList arglist;

precedence right ASSIGN;
precedence left EQ, NEQ;
precedence left LT, RE, GT, GE;
precedence left PLUS, MINUS;
precedence left MULDIV;
precedence right UMINUS;

start with program;

program ::= declist funclist // {: RESULT= new Absyn.Program(d,f); :};
          | declist
          | funclist
declist ::= declist declaration
          | declaration
funclist ::= funclist 
declaration ::= INT identlist
              | FLOAT IDENTIFIER
identilist ::= identlist IDENTIFIER
            | IDENTIFIER